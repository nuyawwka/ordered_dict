class MyOrderedDict(object):
    def __init__(self):
        self._dict = {}
        self._keys = []

    def get(self, k, dflt=None):
        return self._dict.get(k, [dflt])[0]
    
    def keys(self):
        for i in self._keys:
            yield i

    def add(self, k, v):
        if k in self._dict:
            self.pop(k)
            
        self._dict[k] = [v, len(self._keys)]
        self._keys.append(k)
        
    def pop(self, k):
        if k not in self._dict:
            raise Exception('key error: %s' % str(k))

        j = self._dict[k][1]
        self._keys.pop(j)
        
        for i in range(j, len(self._keys)):
            self._dict[self._keys[i]][1] -= 1
            
        return self._dict.pop(k)[0]
            
#-------------------------------------------
                    
d = MyOrderedDict()
d.add('a', 1)
d.add('b', 2)
d.add('c', 3)
d.add('a', 4)

for i in d.keys():
    print(i, d.get(i))
