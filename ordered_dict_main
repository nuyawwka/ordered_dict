class DoublyLinkedList(object):
    class Node(object):
        def __init__(self, v):
            self.val  = v
            self.next = None
            self.prev = None
        
    def __init__(self):
        self.head = None
        self.tail = None
    
    def append(self, v):
        node = self.Node(v)
        if self.tail:
            node.prev = self.tail
            self.tail.next = node
            self.tail = node
        else:
            self.head = node
            self.tail = node
        return node
         
    def delete(self, node):
        if self.head == self.tail:
            self.head = None
            self.tail = None
        elif node == self.head:
            self.head = self.head.next
            self.head.prev = None
        elif node == self.tail:
            self.tail = self.tail.prev
            self.tail.next = None
        else:
            node.prev.next = node.next
            node.next.prev = node.prev

class MyOrderedDict(object):
    def __init__(self):
        self._dict = {}
        self._keys = DoublyLinkedList()
        
    def __iter__(self):
        return self.keys()

    def get(self, k, dflt=None):
        return self._dict.get(k, [dflt])[0]
    
    def keys(self):
        node = self._keys.head
        while node:
            yield node.val
            node = node.next

    def add(self, k, v):            
        if k in self._dict:
            self.pop(k)
            
        self._dict[k] = [v, self._keys.append(k)]

    def pop(self, k):
        if k not in self._dict:
            raise Exception('key error: %s' % str(k))

        self._keys.delete(self._dict[k][1])
        return self._dict.pop(k)[0]
            
#-------------------------------------------

d = MyOrderedDict()
d.add('a', 1)
d.add('b', 2)
d.add('c', 3)

for i in d.keys():
    print(i, d.get(i))
    
print()
d.add('a', 4)

for i in d:
    print(i, d.get(i))

print()
d.pop('b')

for i in d:
    print(i, d.get(i))
